####################################################################
#Preparing the server for deployment (One-time)
####################################################################

####################################################################
# INSTALL PREREQUISITIES
####################################################################

(0) Update Apt Get
(a) $sudo apt-get update
(1) Install NPM
(a) $sudo apt-get install npm

(2) Install PM2
(a) $sudo npm install -g pm2@latest

(3) Install nginx to route http:80 to the custom port
(a) $sudo apt-get install nginx

(4) Install Node Js
	Instructions from: https://nodejs.org/en/download/package-manager/#debian-and-ubuntu-based-linux-distributions
(a) $curl -sL https://deb.nodesource.com/setup_6.x | sudo -E bash -
(b) $sudo apt-get install -y nodejs
(c) $--- > REmove as we'll log to our own folder --> sudo chmod 777 /var/log #set permissions to write logs

(5) Install Build Tools
(a) $sudo apt-get install -y build-essential

(6) Install Java (for Neo4j) (http://neo4j.com/docs/operations-manual/current/installation/linux/debian/)
(a) $sudo add-apt-repository ppa:webupd8team/java
(b) $sudo apt-get update
(c) $sudo apt-get install oracle-java8-installer
(d) $update-java-alternatives --list #list java versions on machine
(e) $sudo update-java-alternatives --jre --set java-1.8.0-openjdk-amd64 #replace last argument with the Java 8 version name

(7) Install Neo4j
(a) $sudo wget --no-check-certificate -O - https://debian.neo4j.org/neotechnology.gpg.key | apt-key add -
(b) $echo 'deb http://debian.neo4j.org/repo stable/' | sudo tee /etc/apt/sources.list.d/neo4j.list  # add -a for append (>>)
(c) $sudo apt-get update
(d) $sudo apt-get --assume-yes --allow-unauthenticated install neo4j=3.1.1 #don't prompt, and allow unathenticated

(8) Install ImageMagick Library
(a) $sudo apt install imagemagick #Intall ImageMagick

####################################################################
# MOUNT EBS VOLUME (PRODUCTION ONLY)
# Refer: http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-using-volumes.html
####################################################################

(1) List available devices
(a) lsblk
Look for the device that is not already mounted, because that's the EBS volume that we want to mount

(2) Check if we need to format or not
(a) sudo file -s /dev/<device_name> # as identified in step 1 above

If the output is just "data" then we need to format using the following command

(3) sudo mkfs -t ext4 /dev/<device_name> #only if the format in 2 was 'data'

(4) sudo mkdir /var/www/production/data #create mount point directry

(5) sudo mount /dev/<device_name> /var/www/production/data

(6) sudo chown node /var/www/production/data #change ownership to node user



####################################################################
# PREPARE DEPLOYMENT SPACE
####################################################################

(1) Create deployment user - 'node'
(a) $sudo adduser --disabled-password --gecos "" node


####################################################################
# PREPARE DEPLOYMENT SPACE FOR PRODUCTION ENVIRONMENT
####################################################################

(2) Setup Production Directories for deployment
(a) $sudo su
(b) $mkdir /var/www/production
(c) $cd /var/www/production
(d) $chown -R node /var/www/production #change owner to new 'node' user

(3) Allow deployments from dev machine (since production deployment is manual)
(a) Generate SSH Key Pair on Dev Machine (if ~/.ssh/id_rsa.pub does not already exist)
	$ssh-keygen -t rsa -b 4096 -C "Some Comment to identify this key"

	This will generate the private key at ~/.ssh/id_rsa and public key at ~/.ssh/id_rsa.pub

(b) $su node #Login to production server using the deployment user 'node'
(c) $ssh-keygen -t rsa #create the ~/.ssh folder (ignore the generated keys), use defaults and no paraphrase
(d) Edit the ~/.ssh/authorized_keys file and append the contents of the public key from the previous step
(e) You should now be able to deploy to the production server from this dev machine without any prompts

####################################################################
# PREPARE DEPLOYMENT SPACE FOR STAGING ENVIRONMENT
####################################################################

(4) Setup Staging Directories for deployment
(0) Get back to user 'ubuntu'
(a) $sudo su
(b) $mkdir /var/www/staging
(c) $cd /var/www/staging
(d) $chown -R node /var/www/staging #change owner to new 'node' user

(5) Allow silent deployments from CI/CD machine (Circle CI) to staging server
(a) Fetch the Public/Private keys for Circle CI generated by me earlier (stored in secure location)
(b) Add the private key to the Circle CI system to "identify" itself
	(a) Login to the Circle CI account > Project > Settings > Permissions > SSH Permissions
	(b) Add the Private Key and Save (you can leave the host name empty if you want to use across multiple hosts)

(c) Configure the EC2 Machine so it can identify the incoming SSH requests from Circle CI for deployment
	(a) Login to EC2 machine using the same user that Circle CI will be using to deploy ('node')
	(b) Edit the ~/.ssh/authorized_keys file (create if not present)
	(c) Copy paste the Public Key (append to the file) and save


####################################################################
# PREPARE NEO4J
####################################################################

(1) Set up password / authentication for Neo4j
(a) sudo neo4j-admin set-initial-password mypassword #Set Neo4j Database password (match with my code in app.js)
(b) (may not be required - see step 4) curl -H "Content-Type: application/json" -X POST -d '{"password":"mypassword"}' -u neo4j:neo4j http://localhost:7474/user/neo4j/password #change password

Note: this needs to be done twice, since the initial password needs to be changed (for security purposes) (see step 4)

(2) Configure custom Database and Log Path for Neo4j
(a) sudo vi /etc/neo4j/neo4j.config #edit the configuration file
(b) Find the line below and change the database and log directories as below:
dbms.directories.data=/var/www/production/data/db
dbms.directories.logs=/var/www/production/data/log/neo4j

Note: Make sure the same keys are not present elsewhere in the file - comment out any other duplicate key settings by adding a #

(c) Set the appropriate permissions on the database folder - change ownership to neo4j user since node doesn't need to read/write to this folder directly.
	(if needed) sudo mkdir /var/www/production/data/db
	sudo chown neo4j /var/www/production/data/db

	(if needed) sudo mkdir -p /var/www/production/data/log/neo4j
	sudo chown neo4j /var/www/production/data/log/neo4j

(3) Configure Neo4j to allow Remote Web Admin Access
(a) sudo vi /etc/neo4j/neo4j.conf #Edit the /etc/neo4j/neo4j.conf configuration file
(b) Find the line under HTTP Connector section and uncomment/edit it to match the following:
	dbms.connector.http.listen_address=0.0.0.0:7474

(c) sudo service neo4j restart #Restart the neo4j service
(d) You should now be able to access the web admin using the public url, something like:
	http://ec2-18-221-25-182.us-east-2.compute.amazonaws.com:7474/

(e) Disable Bolt in the web admin interface.  Go to Settings > BOLT + ROUTING > Check "Do not use bolt"
(f) In the web admin interfae, enter :server connect, and enter the neo4j login credentials, and it should be connected

(4) Change the temp password to the actual password via the web admin interface (it should prompt to change)
	:server connect
	or
	:server change-password

####################################################################
# PREPARE GITHUB PUBLIC/PRIVATE KEYS FOR CLONING SILENTLY
# Refer: https://help.github.com/articles/which-remote-url-should-i-use/
# https://help.github.com/articles/connecting-to-github-with-ssh/
#
# REFER KEYS.txt FOR THE ACTUAL KEYS.
####################################################################

(1) Fetch the Public/Private keys for Github generated by me earlier (stored in secure location)

(2) Add the Public key to the ezeeideas@gmail.com Github account 
(a) Go to (Settings > SSH and GPG Keys > SSH Keys > New SSH Key) and paste the public key data

(3) Add the Private key to the actual machine on which we need deploy / clone the code (e.g., EC2)
(a) Login to the machine using the user that will be used to clone (e.g., 'node' deployment user)
(b) Create a file called $HOME/.ssh/id_rsa_github
(c) Copy the contents of the Private Key to the file in step 3b
(d) chmod 400 $HOME/.ssh/id_rsa_github #set reduced permissions on the file
(e) Create a file called $HOME/.ssh/config, and add the below to the file:
host github.com
 HostName github.com
 IdentityFile ~/.ssh/id_rsa_github
 User git

All Set!  You should now be able to clone the repository using the below command:
(4) git clone git@github.com:ezeeideas/delphinus.git

####################################################################
# CONFIGURE NGINX TO ROUTE TRAFFIC FROM :80 (http) AND :443 (https) 
# TO NODE JS
####################################################################

(1) Configure Nginx to route http (:80) traffic to Node JS at port :8080
(a) $sudo rm /etc/nginx/sites-enabled/default
(b) Create a new file: /etc/nginx/sites-available/captionify.com and add these lines to it:

For Production:
server {
    listen 80;
    server_name www.captionify.com;

    location / {
        proxy_set_header   X-Forwarded-For $remote_addr;
        proxy_set_header   Host $http_host;
        proxy_pass         "http://127.0.0.1:8080";
    }
}

For Staging:
server {
    listen 80;
    server_name stage.captionify.com;

    location / {
        proxy_set_header   X-Forwarded-For $remote_addr;
        proxy_set_header   Host $http_host;
        proxy_pass         "http://127.0.0.1:8080";
    }
}

(c) $sudo ln -s /etc/nginx/sites-available/captionify.com /etc/nginx/sites-enabled/captionify.com
(d) $sudo service nginx restart

(2) Configure Nginx to route https (:443) traffic to Node JS at port :8080
    Setup Certbot / Lets Encrypt for Automatic SSL Certificates (Excellent Tutorial: https://www.digitalocean.com/community/tutorials/how-to-secure-nginx-with-let-s-encrypt-on-ubuntu-16-04)
(a) $sudo add-apt-repository ppa:certbot/certbot
(b) $sudo apt-get update
(c) $sudo apt-get install python-certbot-nginx
(d) $sudo certbot --nginx -d www.captionify.com #for production
	OR
	$sudo certbot --nginx -d stage.captionify.com #for stage

	Note that the above will only work if the public domain captionify.com or stage.captionify.com (as the case may be) is
	set up and reachable via http and https

	When prompted about redirection for HTTPS, select "No Redirect" option as we're going to set up redirection later ourselves.

(e) $sudo openssl dhparam -out /etc/ssl/certs/dhparam.pem 2048
(f) Add this line anywhere in the 'server' block of /etc/nginx/sites-available/captionify.com -> ssl_dhparam /etc/ssl/certs/dhparam.pem;

(g) $sudo systemctl reload nginx #reload Nginx
(h) Setup cron job to auto-renew the certificate, if needed
	$sudo crontab -e #edit crontab file in editor
	$paste the following at the end of the crontab file => 15 3 * * * /usr/bin/certbot renew --quiet


####################################################################
# INSTALL SOCIAL KEYS TO SERVER
####################################################################

All social keys (facebook, twitter, etc.) are now picked up at run time from the .env file in the <root>/src/server
folder.  You need to make sure these are copied to the appropriate server location, or node will not be able to start.

####################################################################
# TRIGGER ACTUAL DEPLOYMENT (MANUAL) (from dev machine)
####################################################################

(1) Ensure ecosystem.config.js is available and accurate

(2) Trigger deployment setup for Production
	$pm2 deploy ecosystem.config.js production setup

(3) Trigger deployment setup for Staging
	$pm2 deploy ecosystem.config.js staging setup